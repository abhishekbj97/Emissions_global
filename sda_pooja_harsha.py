# -*- coding: utf-8 -*-
"""SDA_Pooja_Harsha.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1154iij9UomXZRxDsJ2Nxky0wuq26rydE

# <b>SDA Project</b>


## <b> Global Emission Project </b>


Country Wise Data Analysis

#### <b>Key Points Analysis </b>

1.   Total Countries = 92
2.   Emission Production = 8 (Column with different gases)
3.   Emission Global = 6 (global value)

### <b>STEPS INVOLVED IN PROJECTS</b>

1.     Problem Statement
2.   Data Discovery
3.   Data Preparation
4.   Analyzing the data
5.   EDA
6.   Planning of Model
7.   Results
8.   Conclusion

# Chapter 1. Problem Statement

## Overview
## Global Emissions

The dataset allows for comparisons of various countries and regions in relation to overall emission trends along with their sources

By Sam Donald

Tags: emissions and productions (Country wise and Global share), CO2, CO2 share, N2O, CH4, coal, cement, gas, oil, flaring and other

# chapter 2 Data Discovery

## Dataset Information

<b>This SDA project is based on mainly for Climate and Environemnt Sustainability Emission To Save Planet from Gases</b>

[Datset Information :](https://corgis-edu.github.io/corgis/csv/global_emissions/)

#chapter 3

## 3.1 Version
"""

import platform
platform.python_version()

"""## 3.2 Importing Libraries"""

import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
import seaborn as seabornInstance

df = pd.read_csv('global_emissions.csv')

df

"""### 3.2.1 Data Frame"""

df

"""### 3.2.2 Keys"""

#Keys column
df.keys()

"""### 3.2.3 Columns"""

#Data Column iterate
for col in df.columns:
    print(col)

"""### 3.2.3 Head"""

#Data Head
df.head()

"""###3.2.4 Tail"""

#data tail
df.tail()

"""### 3.2.5 Frame Size"""

#Dataframe size row*col
df.size

type(df.size)

"""###3.2.6 Data Info"""

df.info()

"""### 3.2.7 Data Type Info"""

df.dtypes

df.dtypes.count()

"""### 3.2.8 Data Description"""

df.describe()

df[['Year', 'Country.GDP', 'Country.Population', 'Emissions.Production.CH4']].describe()

df['Country.Name'].describe()

df['Country.Code'].describe()

"""### 3.2.9 Null info"""

df.isnull()

df.isnull().count()

df.isnull().sum()

df.hist(figsize=(18, 10))
plt.show()

"""###3.2.10 Duplicate """

df.duplicated().value_counts()

"""### 3.2.11 Data Locate info"""

df.iloc[0]

df.iloc[:,:5]

"""### 3.3.12 Renaming Header(column)"""

df

df_renamining_columns = df

df_renamining_columns.rename(columns = {'Country.Name':'Country_Name', 
                                        'Country.Code':'Country_Code',
                                        'Country.GDP':'Country_GDP', 
                                        'Country.Population':'Country_Population',
                                        'Emissions.Production.CH4':'Emissions_Production_CH4',
                                        'Emissions.Production.N2O':'Emissions_Production_N2O',
                                        'Emissions.Production.CO2.Cement':'Emissions_Production_CO2_Cement',
                                        'Emissions.Production.CO2.Coal':'Emissions_Production_CO2_Coal',
                                        'Emissions.Production.CO2.Gas':'Emissions_Production_CO2_Gas',
                                        'Emissions.Production.CO2.Oil':'Emissions_Production_CO2_Oil',
                                        'Emissions.Production.CO2.Flaring':'Emissions_Production_CO2_Flaring',
                                        'Emissions.Production.CO2.Other':'Emissions_Production_CO2_Other',
                                        'Emissions.Production.CO2.Total':'Emissions_Production_CO2_Total',
                                        'Emissions.Global Share.CO2.Cement':'Emissions_Global_Share_CO2_Cement',
                                        'Emissions.Global Share.CO2.Coal':'Emissions_Global_Share_CO2_Coal',
                                        'Emissions.Global Share.CO2.Gas':'Emissions_Global_Share_CO2_Gas', 
                                        'Emissions.Global Share.CO2.Oil':'Emissions_Global_Share_CO2_Oil',
                                        'Emissions.Global Share.CO2.Flaring':'Emissions_Global_Share_CO2_Flaring',
                                        'Emissions.Global Share.CO2.Total':'Emissions_Global_Share_CO2_Total'}, 
                                         inplace = True)

df_renamining_columns

df = df_renamining_columns
df

"""## 3.3 Correlation"""

df.hist(figsize=(18, 12))
plt.show()

df.corr()

plt.figure(figsize=(12, 8))
correlations = df.corr().round(2)
mask = np.triu(np.ones_like(correlations))
sns.heatmap(data=correlations, mask=mask, square=True, linewidths=0.5, annot=True)
plt.show()

plt.figure(figsize=(12,8))
sns.heatmap(df.corr(), annot=True)

plt.figure(figsize=(12, 4.5))
sns.violinplot(x="Country_Name", y="Emissions_Global_Share_CO2_Total", data=df)
plt.show()

plt.figure(figsize=(20, 30))
sns.violinplot(x="Emissions_Global_Share_CO2_Total", y="Country_Name", data=df)
plt.show()

sns.pairplot(df)

"""## 3.4 Data Pipelines"""

# define numerical and categorical columns


numerical_feature = [feat for feat in df.columns if df[feat].dtype != 'O']
categorical_feature = [feat for feat in df.columns if df[feat].dtype == 'O']

print('we have {} numerical features of Data frame:  \n\n {}'.format(len(numerical_feature),numerical_feature))
print()
print('we have {} categorical features : \n\n {}' .format(len(categorical_feature),categorical_feature))

"""#### Plot distribution of all independent Numerical variables"""

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.distplot(x=df[col],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""Boxplot (Numerical features)"""

numerical_feature

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(3,2,i+1)
    sns.boxplot(x=df[col])
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""Countplot (categorical features)"""

categorical_feature

"""Regression Plot (numerical features)

# chapter 4 & 5, EDA
"""

print("lkhfgfuygv")

"""## 4.1 Country Analysis"""

df['Country.Name'].describe()

df['Country.Name'].unique()

df['Country_Name'].value_counts()

df_Country_Population_sort = df.groupby('Country.Name')['Country.Population'].mean().sort_values(ascending=False)
print(df_Country_Population_sort)

plt.figure(figsize=(18,30))
sns.barplot(x='Country_GDP', y ='Country_Name', data=df)

"""## 4.2 Year Analysis"""

df['Year'].describe()

df['Year'].count()

df['Year'].unique()

df['Year'].min()

df['Year'].max()

df['Year'].value_counts()

"""### 4.2.1 1992"""

df_1992 = df.loc[df['Year'] == 1992]

df_1992

"""###4.2.2 2010"""

df_2010 = df.loc[df['Year'] == 2010]

df_2010

"""### 4.2.3 2018"""

df_2018 = df.loc[df['Year'] == 2018]

df_2018

"""## 4.3 Population Analysis"""

df_Country_Population_sort = df.groupby('Country_Name')['Country_Population'].mean().sort_values(ascending=False)
print(df_Country_Population_sort)

plt.figure(figsize=(18,4))
df_Country_Population_sort.plot(kind='bar', color='green')
plt.show()

# figure(figsize=(WIDTH_SIZE,HEIGHT_SIZE))
plt.figure(figsize=(8,18))
df_Country_Population_sort.plot(kind='barh', color='green')
plt.show()

plt.figure(figsize=(18,30))
sns.barplot(x='Country_Population', y ='Country_Name', data=df)

"""## 4.4 Emissions Production Analysis

### 4.4.1 CH4
"""

df

sns.displot(df, x="Emissions_Production_CH4")

sns.displot(df, x="Emissions_Production_CH4", kind="ecdf")

sns.displot(df, x="Emissions_Production_CH4", y="Year", kind="kde")

sns.jointplot(data=df, x="Emissions_Production_CH4", y="Year")

df_grouping_Emissions_Production_CH4 = df.groupby(by="Year")["Emissions_Production_CH4"].mean()

df_grouping_Emissions_Production_CH4

"""Regression Plot (Emissions_Production_CO2_Total)"""

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.regplot(x=df[col],y=df['Emissions_Production_CO2_Total'],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""### 4.4.2 N2O

Emissions_Production_N2O
"""

df

numerical_feature

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.regplot(x=df[col],y=df['Emissions_Production_N2O'],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""### 4.4.3 Cement"""

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.regplot(x=df[col],y=df['Emissions_Production_CO2_Cement'],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""### 4.4.4 Coal"""

numerical_feature

sns.displot(df, x="Emissions_Production_CH4", kind="kde")

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.regplot(x=df[col],y=df['Emissions_Production_CO2_Coal'],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""### 4.4.5 Gas"""

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.regplot(x=df[col],y=df['Emissions_Production_CO2_Gas'],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""### 4.4.6 Oil"""

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.regplot(x=df[col],y=df['Emissions_Global_Share_CO2_Oil'],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""### 4.4.7 Flaring"""

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.regplot(x=df[col],y=df['Emissions_Global_Share_CO2_Flaring'],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""### 4.4.8 Others """

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.regplot(x=df[col],y=df['Emissions_Production_CO2_Other'],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""### 4.4.9 Total"""

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.regplot(x=df[col],y=df['Emissions_Global_Share_CO2_Total'],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""## 4.5 Emissions.Global Share Analysis

### 4.5.1 Cement
"""

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.regplot(x=df[col],y=df['Emissions_Global_Share_CO2_Cement'],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""### 4.5.2 Coal"""

plt.figure(figsize=(15,10))
plt.tight_layout()
seabornInstance.distplot(df['Emissions_Global_Share_CO2_Coal'])

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.regplot(x=df[col],y=df['Emissions_Global_Share_CO2_Coal'],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""### 4.5.3 Gas"""

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.regplot(x=df[col],y=df['Emissions_Global_Share_CO2_Gas'],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""### 4.5.4 Oil"""

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.regplot(x=df[col],y=df['Emissions_Global_Share_CO2_Oil'],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""### 4.5.5 Flaring"""

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.regplot(x=df[col],y=df['Emissions_Global_Share_CO2_Flaring'],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

"""### 4.5.6 Total"""

plt.figure(figsize=(18,30))
sns.barplot(y='Emissions_Global_Share_CO2_Total', x='Year', data=df)

plt.title("distribution of CO2")
p = sns.histplot(x='Emissions_Global_Share_CO2_Total',data=df,bins=50,color='orange')
p.set_xlabel("Emissions_Global_Share_CO2_Total", fontsize=16)
p.set_ylabel("count",fontsize=16)

plt.figure(figsize=(10,15))
for i,col in enumerate(numerical_feature):
    plt.subplot(4,2,i+1)
    sns.regplot(x=df[col],y=df['Emissions_Global_Share_CO2_Total'],color='indianred')
    plt.xlabel(col,weight='bold')
    plt.tight_layout()

df_numerical_data = df.corr()
df_numerical_data

sns_numerical_data =  sns.heatmap(df.corr(),cmap='Blues')
sns_numerical_data

"""## 4.6 Outliers Detection"""

df_outliers = pd.read_csv('global_emissions.csv')
df_outliers.head()

df_outliers.shape

df_outliers.rename(columns = {'Country.Name':'Country_Name', 
                                        'Country.Code':'Country_Code',
                                        'Country.GDP':'Country_GDP', 
                                        'Country.Population':'Country_Population',
                                        'Emissions.Production.CH4':'Emissions_Production_CH4',
                                        'Emissions.Production.N2O':'Emissions_Production_N2O',
                                        'Emissions.Production.CO2.Cement':'Emissions_Production_CO2_Cement',
                                        'Emissions.Production.CO2.Coal':'Emissions_Production_CO2_Coal',
                                        'Emissions.Production.CO2.Gas':'Emissions_Production_CO2_Gas',
                                        'Emissions.Production.CO2.Oil':'Emissions_Production_CO2_Oil',
                                        'Emissions.Production.CO2.Flaring':'Emissions_Production_CO2_Flaring',
                                        'Emissions.Production.CO2.Other':'Emissions_Production_CO2_Other',
                                        'Emissions.Production.CO2.Total':'Emissions_Production_CO2_Total',
                                        'Emissions.Global Share.CO2.Cement':'Emissions_Global_Share_CO2_Cement',
                                        'Emissions.Global Share.CO2.Coal':'Emissions_Global_Share_CO2_Coal',
                                        'Emissions.Global Share.CO2.Gas':'Emissions_Global_Share_CO2_Gas', 
                                        'Emissions.Global Share.CO2.Oil':'Emissions_Global_Share_CO2_Oil',
                                        'Emissions.Global Share.CO2.Flaring':'Emissions_Global_Share_CO2_Flaring',
                                        'Emissions.Global Share.CO2.Total':'Emissions_Global_Share_CO2_Total'}, 
                                         inplace = True)

df_outliers

"""CH4"""

plt.figure(figsize=(16,5))
plt.subplot(1,2,1)
sns.distplot(df_outliers['Emissions_Production_CH4'])
plt.show()

sns.boxplot(df_outliers['Emissions_Production_CH4'])
plt.show()

percentile25 = df_outliers['Emissions_Production_CH4'].quantile(0.25)
percentile75 = df_outliers['Emissions_Production_CH4'].quantile(0.75)

percentile25

percentile75

iqr = percentile75 - percentile25

iqr

upper_limit = percentile75 + 1.5 * iqr
lower_limit = percentile25 - 1.5 * iqr

upper_limit

lower_limit

df_outliers[df_outliers['Emissions_Production_CH4'] > upper_limit]
df_outliers[df_outliers['Emissions_Production_CH4'] < lower_limit]

new_df = df_outliers[df_outliers['Emissions_Production_CH4'] < upper_limit]
new_df.shape

plt.figure(figsize=(16,8))
plt.subplot(2,2,1)
sns.distplot(df_outliers['Emissions_Production_CH4'])
plt.subplot(2,2,2)
sns.boxplot(df_outliers['Emissions_Production_CH4'])
plt.subplot(2,2,3)
sns.distplot(new_df['Emissions_Production_CH4'])
plt.subplot(2,2,4)
sns.boxplot(new_df['Emissions_Production_CH4'])
plt.show()

new_df

new_df.describe()

sns.heatmap(new_df.corr(), annot=True, cmap='coolwarm')

df_grouping = new_df.groupby(by="Year")["Emissions_Production_CH4","Emissions_Production_N2O","Country_Population"].mean()

df_grouping

plt.scatter(df_grouping.Emissions_Production_CH4, df_grouping.Emissions_Production_N2O,  color='blue')
plt.xlabel("CH4")
plt.ylabel("n2O")
plt.show()

msk = np.random.rand(len(df_grouping)) < 0.8
train = df_grouping[msk]
test = df_grouping[~msk]

"""# Chapter 5 Planning of Model"""

from sklearn import linear_model
regr = linear_model.LinearRegression()
train_x = np.asanyarray(train[['Emissions_Production_CH4']])
train_y = np.asanyarray(train[['Emissions_Production_N2O']])
regr.fit (train_x, train_y)
# The coefficients
print ('Coefficients: ', regr.coef_)
print ('Intercept: ',regr.intercept_)

plt.scatter(train.Emissions_Production_CH4, train.Emissions_Production_N2O,  color='blue')
plt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], '-r')
plt.xlabel("CH4")
plt.ylabel("N2")

from sklearn.metrics import r2_score

test_x = np.asanyarray(test[['Emissions_Production_CH4']])
test_y = np.asanyarray(test[['Emissions_Production_N2O']])
test_y_hat = regr.predict(test_x)

print("Mean absolute error: %.2f" % np.mean(np.absolute(test_y_hat - test_y)))
print("Residual sum of squares (MSE): %.2f" % np.mean((test_y_hat - test_y) ** 2))
print("R2-score: %.2f" % r2_score(test_y_hat , test_y) )

viz = new_df[['Country_Name','Emissions_Production_CO2_Total','Year']]
viz.hist()
plt.show()

plt.scatter(new_df.Year, new_df.Emissions_Production_CO2_Total,  color='blue')
plt.xlabel("Year")
plt.ylabel("Emission")
plt.show()

df_lg = new_df

msk = np.random.rand(len(df_lg)) < 0.8
train = df_lg[msk]
test = df_lg[~msk]

from sklearn import linear_model
regr = linear_model.LinearRegression()
train_x = np.asanyarray(train[['Year']])
train_y = np.asanyarray(train[['Emissions_Production_CO2_Total']])
regr.fit (train_x, train_y)

# The coefficients
print ('Coefficients: ', regr.coef_)
print ('Intercept: ',regr.intercept_)

plt.scatter(train.Year, train.Emissions_Production_CO2_Total,  color='blue')
plt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], '-r')
plt.xlabel("Engine size")
plt.ylabel("Emission")

from sklearn.metrics import r2_score

test_x = np.asanyarray(test[['Year']])
test_y = np.asanyarray(test[['Emissions_Production_CO2_Total']])
test_y_hat = regr.predict(test_x)

print("Mean absolute error: %.2f" % np.mean(np.absolute(test_y_hat - test_y)))
print("Residual sum of squares (MSE): %.2f" % np.mean((test_y_hat - test_y) ** 2))
print("R2-score: %.2f" % r2_score(test_y_hat , test_y) )

df_lg.shape

"""Another Analysis"""

plt.scatter(df_lg.Emissions_Production_CO2_Coal, df_lg.Emissions_Production_CO2_Gas,  color='blue')
plt.xlabel("coal")
plt.ylabel("Gas")
plt.show()

msk = np.random.rand(len(df_lg)) < 0.8
train = df_lg[msk]
test = df_lg[~msk]

from sklearn import linear_model
regr = linear_model.LinearRegression()
train_x = np.asanyarray(train[['Emissions_Production_CO2_Coal']])
train_y = np.asanyarray(train[['Emissions_Production_CO2_Gas']])
regr.fit (train_x, train_y)
# The coefficients
print ('Coefficients: ', regr.coef_)
print ('Intercept: ',regr.intercept_)

plt.scatter(train.Emissions_Production_CO2_Coal, train.Emissions_Production_CO2_Gas,  color='blue')
plt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], '-r')
plt.xlabel("coal")
plt.ylabel("Gas")

from sklearn.metrics import r2_score

test_x = np.asanyarray(test[['Emissions_Production_CO2_Coal']])
test_y = np.asanyarray(test[['Emissions_Production_CO2_Gas']])
test_y_hat = regr.predict(test_x)

print("Mean absolute error: %.2f" % np.mean(np.absolute(test_y_hat - test_y)))
print("Residual sum of squares (MSE): %.2f" % np.mean((test_y_hat - test_y) ** 2))
print("R2-score: %.2f" % r2_score(test_y_hat , test_y) )

"""Grouping Analysis"""

df_grouping = new_df.groupby(by="Year")["Emissions_Production_CH4","Emissions_Production_N2O","Country_Population"].mean()

df_grouping

plt.scatter(df_grouping.Emissions_Production_CH4, df_grouping.Emissions_Production_N2O,  color='blue')
plt.xlabel("CH4")
plt.ylabel("n2O")
plt.show()

values = new_df.groupby('Country_Name').sum()['Country_GDP'].sort_values()
values.plot(kind = 'bar', figsize=(12,8))
plt.show()

plt.figure(figsize=(16,8))
plt.subplot(2,2,1)
sns.distplot(df['Country_GDP'])
plt.subplot(2,2,2)
sns.boxplot(df['Country_GDP'])
plt.subplot(2,2,3)
sns.distplot(new_df['Country_GDP'])
plt.subplot(2,2,4)
sns.boxplot(new_df['Country_GDP'])
plt.show()

"""## 5.1 Data Modeling"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import warnings

df = pd.read_csv(r"global_emissions.csv")

df

X =df.drop(['Emissions.Production.CO2.Total','Country.Name','Country.Code'],axis=1)
y = df['Emissions.Production.CO2.Total']

"""## 5.2 Training """

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split (X,y,test_size=0.3, random_state=42)

print(X_train.shape, y_train.shape)

print(X_test.shape, y_test.shape)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler

X_train = scaler.fit_transform(X_train)

X_test = scaler.transform(X_test)

X_train

X_test

from sklearn.linear_model import LinearRegression

regression = LinearRegression()

regression

regression.fit(X_train,y_train)

"""Coefficient and intercept"""

print("coefficient ",regression.coef_)

print("intercept ",regression.intercept_)

"""## 5.3 Testing"""

# prediction for the test data
reg_pred = regression.predict(X_test)
reg_pred

# Mean_squared_error, Mean_absolute_error

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
print(mean_squared_error(y_test,reg_pred))
print(mean_absolute_error(y_test,reg_pred))
print(np.sqrt(mean_squared_error(y_test,reg_pred)))

# Performance metrics
# R squared and adjusted R square
# R squared
from sklearn.metrics import r2_score
linear_score=r2_score(y_test,reg_pred)
print(linear_score)

# Adjusted R Squared
#### adjusted R square
#### display adjusted R-squared
print(1 - (1-linear_score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1))

from numpy import sqrt 
from sklearn.model_selection import cross_val_predict

def model_det(model, model_name, cvn=20): # Default value for cvn = 20
    print(model_name)
    print()
    # train, test Model pred
    y_pred_model_train = model.predict(X_train)
    y_pred_model_test = model.predict(X_test)
    print()
    print("MSE MAE RMSE")
    # MSE MAE RMSE
    print("Mean Square Error ",mean_squared_error(y_test,y_pred_model_test))
    print("Mean Absolute Error ",mean_absolute_error(y_test,y_pred_model_test))
    print("Root Mean Square Error ",np.sqrt(mean_squared_error(y_test,y_pred_model_test)))
    print()
    print("R2Score Model")
    # train, test R2Score model
    R2Score_model_train = r2_score(y_train, y_pred_model_train)
    print("Training R2 Score: ", R2Score_model_train)
    R2Score_model_test = r2_score(y_test, y_pred_model_test)
    print("Testing R2 Score: ",  R2Score_model_test)
    print( )
    print("Adj_R2Score Model")
    # train, test Adj_R2Score model
    Adj_R2Score_model_train = 1 - (1-R2Score_model_train)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)
    print("Training Adj_R2 Score: ", Adj_R2Score_model_train)
    Adj_R2Score_model_test = 1 - (1-R2Score_model_test)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)
    print("Testing Adj_R2 Score: ",  Adj_R2Score_model_test)


    RMSE_model_train = sqrt(mean_squared_error(y_train, y_pred_model_train))
    print("RMSE for Training Data: ", RMSE_model_train)
    RMSE_model_test = sqrt(mean_squared_error(y_test, y_pred_model_test))
    print("RMSE for Testing Data: ", RMSE_model_test)
#     if model == polynomial_reg:
#         polynomial_features = PolynomialFeatures(degree=3)
#         y_pred_cv_PR = cross_val_predict(model, polynomial_features.fit_transform(X), y, cv=20)
#     else:
    y_pred_cv_model = cross_val_predict(model, X, y, cv=cvn)
    accuracy_cv_model = r2_score(y, y_pred_cv_model)
    print("Accuracy for", cvn,"- Fold Cross Predicted: ", accuracy_cv_model)

from sklearn.linear_model import LinearRegression
regressor=LinearRegression()
regressor.fit(X_train,y_train)
LinearRegression()

model_det(regressor,"multilinear regression")

"""## 5.4 Result"""

by_country = df.groupby('Country.Name')['Emissions.Production.CO2.Total'].sum().sort_values(ascending=False)
print(by_country)

by_country.plot(kind='bar', color='green')
#figure(figsize=(WIDTH_SIZE,HEIGHT_SIZE))
plt.figure(figsize =(90, 30))
plt.show()

plt.figure(figsize =(10, 30))
by_country.plot(kind='barh', color='green')
#figure(figsize=(WIDTH_SIZE,HEIGHT_SIZE))
#plt.figure(figsize =(50, 30))
#plt.figure(figsize=(10,60))
#plt.figure().set_figheight(100)
plt.show()

plt.figure(figsize =(8, 4))
by_country.plot(kind='line', color='green')
#figure(figsize=(WIDTH_SIZE,HEIGHT_SIZE))
#plt.figure(figsize =(50, 30))
#plt.figure(figsize=(10,60))
#plt.figure().set_figheight(100)
plt.show()

"""# Chapter 6 Analysing  Results"""

plt.figure(figsize =(20, 4))
by_country = df.groupby('Country.Name')['Emissions.Global Share.CO2.Total'].sum().sort_values(ascending=False)
by_country.plot(kind='bar', color='red')
plt.show()

emission_total = df.groupby(pd.Grouper(key='Year'))['Emissions.Global Share.CO2.Total'].sum()
year = emission_total.pct_change()
year.plot(kind='line', ls='-.', color='orange')
plt.xlabel('Year')
plt.ylabel('Emissions.Global Share.CO2.Total')
plt.show()

"""# Conclusion"""

co2_total = df.groupby('Country.Name')['Emissions.Global Share.CO2.Total'].sum().sort_values(ascending=False)
co2_total.head().plot(kind='barh', color='yellow')
plt.show()

"""Highest"""

co2_total = df.groupby('Country.Name')['Emissions.Global Share.CO2.Total'].sum().sort_values(ascending=False)
co2_total.head().plot(kind='bar', color='Green')
plt.show()

"""Lowest"""

co2_total = df.groupby('Country.Name')['Emissions.Global Share.CO2.Total'].sum().sort_values(ascending=True)
co2_total.head().plot(kind='bar', color='Blue')
plt.show()

